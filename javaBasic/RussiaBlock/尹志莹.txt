软件的开发过程：
1）功能分析
（1）游戏方块预览功能。在游戏过程中，当在游戏底板中出现一个游戏方块时，必须在游戏方块预览区域中出现下一个游戏方块，这样有利于游戏玩家控制游戏的策略。由于在此游戏中存在7种不同的游戏方块，所以在游戏方块预览区域中需要显示随即生成的游戏方块。  
（2）游戏方块控制功能。通过各种条件的判断，实现对游戏方块的左移、右移、快速下移、自由下落、旋转功能，以及行满消除行的功能。  
（3）游戏显示更新功能。当游戏方块左右移动、下落、旋转时，要清除先前的游戏方块，用新坐标重绘游戏方块。当消除满行时，要重绘游戏底板的当前状态。  
（4）游戏速度分数更新功能。在游戏玩家进行游戏过程中，需要按照一定的游戏规则给玩家计算游戏分数。  
（5）游戏帮助功能。玩家进入游戏后，将有对本游戏如何操作的友情提示。

俄罗斯方块的基本规则：一个用于摆放小型正方形的平面虚拟场地，其标准大小：
行宽为10，列高为20，以每个小正方形为单位。 
2、一组由4个小型正方形组成的规则图形，
英文称为Tetromino，中文通称为方块共有7种，
分别以S、Z、L、J、I、O、T这7个字母的形状来命名。
I：一次最多消除四层
J（左右）：最多消除三层，或消除二层
L：最多消除三层，或消除二层
O：消除一至二层
S（左右）：最多二层，容易造成孔洞
Z （左右）：最多二层，容易造成孔洞
T：最多二层

（1）玩家操作有：旋转方块，以格子为单位左右移动方块，
      让方块加速落下。
（2）方块移到区域最下方或是着地到其他方块上无法移动时，
     就会固定在该处，而新的方块出现在区域上方开始落下。
（3）当区域中某一行格子全部由方块填满，则该行会消失
  并成为玩家的得分。同时删除的列数越多，得分指数上升。每消除6行升高一级     ，即消除6行等级为2级，消除12行等级为3级。
（4）当固定的方块堆到区域最上方而无法消除层数时，则游戏结束。
（6）一般来说，游戏还会提示下一个要落下的方块，熟练的玩家会计算到下一个方块，评估要如何进行。由于游戏能不断进行下去对商业用游戏不太理想，所以一般还会随着游戏的进行而加速提高难度。
（7）预先设置的随机发生器不断地输出单个方块到场地顶部

2）需求分析
 2.1 找对象，找东西
   对象关系模型
  tetris (俄罗斯方块)
    |-- tetromino 一个正在下落的方块
    |     |-- cells 4个格子
    |-- nextOne 下一个 准备下落的方块
    |     |-- cells 4个格子 
    |-- wall 墙, 是方块下落到底部 打散着陆到墙上
          |-- rows 20行
               |-- cols 10列 个格子
 
  2.2 数学模型设计
     
  2.3 类的设计: 是根据数学模型 设计的属性
   Tetris (俄罗斯方块)类 继承 JPanel
     |-- Tetromino tetromino 正在下落的方块
     |-- Tetromino nextOne 下一个准备下落的方块
     |-- Cell[][] wall 是2维数组
   
   Tetromino 类
     |-- Cell[] cells 4个格子
     
   T 型方块 继承  Tetromino 类
   I 型方块 继承  Tetromino 类
   ...
   
   Cell 类 
	|-- int row 行号 
	|-- int col 列号
   
3）功能分析，和 算法实现
   功能分析 映射到 数学模型的数据计算
    数学模型的数据计算：算法
  
  分析策略：功能就是方法，功能的描述中的动词也是方法    
    
  3.1 下落功能：（softDropAction()）
     如果（检查）能够下落就下落，否则就着陆到墙上，
    而新的方块出现在区域上方开始落下。 
       （检查）能够下落: tetrominoCanDrop()
        着陆到墙上: tetrominoLandToWall()
       
        根据数学模型分析 方法实现的计算策略.
        增加了音效 
        if (tetrominoCanDrop()) {
		try{
				
		FileInputStream file=new FileInputStream("D:\\workspace1\\el\\src\\cn\\lala\\nihao\\baibai\\down.wav");
				AudioStream as=new AudioStream(file);
				AudioPlayer.player.start(as);
				
		}catch(IOException e){}

  3.2 移动(左右)功能 moveRightAction（）
    
    可以移动方块，移动边界就不能再移动了，如果碰到墙上的方块
    也不能再移动了。
    
    变通解决方案：先移动方块，移动以后立即检查移动结果，如果
    发现出界，就立即移动回来。也就是原地不动。
     如果移动以后，检查发现与墙上的方块重合，也移动回来。
    
    功能分析：
      1）检查是否出界  outOfBound()
      2）检查是否重合  coincide()
    
    tetromino.moveLeft();
    if(outOfBound() || coincide()){
    	tetromino.moveRight();
    }
      3)移动时增加音效

     try{
			
			FileInputStream file=new FileInputStream("D:\\workspace1\\el\\src\\cn\\lala\\nihao\\baibai\\swift.wav");
			AudioStream as=new AudioStream(file);
			AudioPlayer.player.start(as);
		
			}catch(IOException e){}

  3.3 旋转功能  rotateRightAction()
    
    tetromino.rotateRight();
    if(outOfBound() || coincide()){
      tetromino.rotateLeft();
    }
  
  3.4 开始功能： 开始自动下落 startAction()
    1) 游戏开始时候执行 action() 方法中执行这个方法！
    2) 开始流程
     1.清空墙
     2.生成下落的方块 
     3.清空分数、等级
     4.清理暂停 和 结束状态
     5.启动定时器 定时执行 softDropAction
     6.播放开始时的音乐
  3.5 清除满行功能（计分）
    1）播放得分的音效
         try{
		FileInputStream file=new FileInputStream("G:\\workspace\\Russia\\src\\cn\\lala\\nihao\\baibai\\level.wav");
				AudioStream as=new AudioStream(file);
				AudioPlayer.player.start(as);
			}catch(IOException e){}
    2）每消除六行提高一个等级
         if (this.temp >= 6) {
			this.temp = 0;
			level++;
			
		}
  3.6 暂停、继续功能  pauseAction() continueAction()
    1) 暂停流程
      1. 停止定时器
      2. 暂停状态设置为 true
      3. 播放暂停时的音效
    2）暂停事件绑定到 [P] 按键。一定要拦截其它按键的处理
      暂停期间只能处理 [C] 按键事件
    
    3）继续流程
      1. 重新创建并且启动定时器！ 
      2. 暂停状态设置为 false
      3. 继续播放音效
  3.7 结束游戏功能 checkGameOver()
     1) 流程 
        1. 检查wall[0][4] 是否有方块，如果有，游戏游戏结束
        2. 如果游戏结束 gameOver = true
        3. 停止timer 
          
     2) 事件处理
            如果游戏结束，只能处理 [S] 重新开始游戏
      
     3）在清理满行以后检查游戏结束！
        修改 softDropAction hardDropAction      
      
  3.8 绘制 分数，绘制下一个方块,绘制网格
    paint()
    
    paintTetromino()
    paintNextOne()
    paintScore()
  

  3.9构造函数Tetris()的功能
     流程：  
     1）创建菜单条
          m_MenuBar = new MenuBar();
          menuGame = new Menu("游戏");
	  mi_Game_NewGame = new MenuItem("新游戏");
	  mi_Game_ChangeAppearance = new MenuItem("换肤");
	  mi_Game_Exit = new MenuItem("退出");
          menuHelp = new Menu("帮助");
	  mi_Help_ViewHelp = new MenuItem("查看帮助");
	  mi_Help_About = new MenuItem("关于");
     2）相应动作事件
          mi_Game_ChangeAppearance.addActionListener(new HandleAct());
          mi_Game_NewGame.addActionListener(new HandleAct());
	  mi_Game_Exit.addActionListener(new HandleAct());
          mi_Help_ViewHelp.addActionListener(new HandleAct());
	  mi_Help_About.addActionListener(new HandleAct());

     3)将菜单子项加入菜单项
           menuGame.add(mi_Game_NewGame);
	   menuGame.add(mi_Game_ChangeAppearance);
	   menuGame.addSeparator();// 加一条横向分割线
	   menuGame.add(mi_Game_Exit);
	   m_MenuBar.add(menuGame);// 将游戏菜单项加入菜单
           menuHelp = new Menu("帮助");
	   mi_Help_ViewHelp = new MenuItem("查看帮助");
	   mi_Help_About = new MenuItem("关于");
           m_MenuBar.add(menuHelp);
     4)处理菜单命令 内部类HandleAct()
          class HandleAct implements ActionListener
        
         例：对于"退出"菜单项的代码：
             public void actionPerformed(ActionEvent e) {
			if (e.getActionCommand() == "退出") {
				pauseAction();
				int reponse =               JOptionPane.showConfirmDialog(null, "是否退出", "退出",
						                                   JOptionPane.YES_NO_OPTION);
				if (reponse == 0) {
                                        dispose();
					System.exit(0) ;
				}
				

			}
                对于“新游戏”菜单项的代码：
			if (e.getActionCommand() == "新游戏") {
				startAction();
			}


  3.10   paintWall(Graphics g)的功能
      
     更人性化，在游戏区域有网格标识，可以防止玩家移动错误。
      for (int row = 0; row < wall.length; row++) {
	Cell[] line = wall[row];
	  for (int col = 0; col < line.length; col++) {
		Cell cell = line[col];
		int x = col * CELL_SIZE;
		int y = row * CELL_SIZE;
	        if (cell == null) {
		g.setColor(new Color(0));
		// 显示网格
		g.drawRect(x, y, CELL_SIZE, CELL_SIZE);
		} 
                 else {
		g.drawImage(cell.getImage(), x - 1, y - 1, null);
				}
			}
		}














 